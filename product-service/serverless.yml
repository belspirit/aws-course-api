# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1

  environment:
    PG_HOST: lesson4.cavq3snlkdc4.us-east-1.rds.amazonaws.com
    PG_PORT: 5432
    PG_DATABASE: lesson4
    PG_USERNAME: postgres
    PG_PASSWORD: BAcGSe0msBpfTa6fBSWS
    SNS_TOPIC_NAME:
      Ref: createProductTopic

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource:
        - Fn::GetAtt: [catalogItemsQueue, Arn]
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource:
        Ref: createProductTopic

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: "webpack.config.js" # Name of webpack configuration file
    includeModules: false # Node modules configuration for packaging
    packager: "npm" # Packager that will be used to package your external modules
    excludeFiles: "**/*.test.js" # Provide a glob for files to ignore
  exportName: ${self:service}-${self:provider.stage}

functions:
  catalogBatchProcess:
    handler: catalogBatchProcess/index.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt: [catalogItemsQueue, Arn]
  getProductsList:
    handler: getProductsList/index.getProductsList
    events:
      - httpApi:
          path: /products
          method: get
          cors: true
  getProductsById:
    handler: getProductsById/index.getProductsById
    events:
      - httpApi:
          path: /products/{id}
          method: get
          cors: true
  addProduct:
    handler: addProduct/index.addProduct
    events:
      - httpApi:
          path: /products
          method: post
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: rsschool-node-aws-sqs-sns-queue
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: rsschool-node-aws-sqs-sns-topic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: creo_man@mail.ru
        Protocol: email
        TopicArn:
          Ref: createProductTopic
    SNSSubscriptionExpensive:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: sergey.labetik@gmail.com
        Protocol: email
        TopicArn:
          Ref: createProductTopic
        FilterPolicy:
          { "event": ["product_created"], "price_usd": [{ "numeric": [">=", 3000] }] }
  Outputs:
    catalogItemsQueueArn:
      Description: "Catalog Queue Arn value"
      Value:
        Fn::GetAtt:
          - catalogItemsQueue
          - Arn
      Export:
        Name: ${self:custom.exportName}-catalogItemsQueueArn
